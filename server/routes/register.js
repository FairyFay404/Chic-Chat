import express from "express";
import { ref, set, get } from "firebase/database";
import { collection, addDoc, query, where, getDocs, QuerySnapshot } from "firebase/firestore";
import { database } from "../firebase-config.js";
import { SDK_VERSION } from "firebase/app";
import bcrypt from 'bcrypt';


const router = express.Router();
const saltRounds = 10;

/* schema for users */
/* 
{
    id: string [generated by firebase],
    username: string,
    password: hashpassword,
    fName: string,
    lName: string,
    email: string,
    phoneNum: string,
    [profilePicture: img.file,]
    createAt: date,
    updateAt: date
}

*/

/* for create a new user */
/* path for conversation  */
router.post('/', async (req,res)=> {


    // query username in database if it exist 

    const queryData = query(collection(database, "users"), where("username", "==", req.body.username));

    const querySnapShot = await getDocs(queryData);
    
    // check user are exits in database ? 

    /* if users not exist in database  */
    /* hash password and then add it in database */
    if(querySnapShot.empty){
        bcrypt.hash(req.body.password, saltRounds, async function(err, hash) {

            try{
                const newUser =  await addDoc(collection(database, "users"), {
                    username: req.body.username,
                    password: hash,
                    fName: req.body.fName,
                    lName: req.body.lName,
                    email: req.body.email,
                    phoneNum: req.body.phoneNum,
                    createAt: new Date(),
                    updateAt: new Date()
                });
                console.log("Documents ID of users "+newUser.id)
                res.status(200).json({status : "success", message: "successful register", userId: newUser.id})
                return;
            }
            catch(err){
                console.log(err);
                res.status(500).json({status : "fail", message: "successful register", err : err});
                return;
            }
    
        });
    }
    else {
        res.status(422).json({status : "fail", message: "username are exits in database"})
        return;
    }

})

export default router