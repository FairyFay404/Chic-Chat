import express from "express";
import { ref, set, get } from "firebase/database";
import { collection, addDoc, Timestamp, query, where, getDocs, doc, getDoc } from "firebase/firestore";
import { database } from "../firebase-config.js";

const router = express.Router();

/* schema for conversation */
/* 
{
    id: string [generated by firebase],
    member: [
        user1: string,
        user2: string
    ],
    createAt: date,
    updateAt: date
}

*/


/* for create a new conversation */
/* path for create conversation (chat lobby) */

const findpartnerId = (arrayId, myId) => {
    var partnerId = ""
    arrayId.forEach(async (Id, i) => {
        if (Id != myId) {
            partnerId = Id
        }
    })
    return partnerId;
}


router.post('/', async (req, res) => {
    try {
        const newConversation = await addDoc(collection(database, "conversation"), {
            member: [
                req.body.senderId,
                req.body.receiverId
            ],
            createAt: new Date(),
            updateAt: new Date()
        });
        console.log("Document written with ID: ", newConversation.id);
        res.status(200).json({ message: "successfull add a new conversation" })
    }
    catch (err) {
        console.error("Error adding document: ", err);
    }
})

/* path for get conversation that user is a member  */
router.get('/:userId', async (req, res) => {
    try {
        const conversationRef = collection(database, "conversation");
        const queryData = query(conversationRef, where("member", "array-contains", req.params.userId));
        // use any contains for query array ?
        const querySnapShot = await getDocs(queryData);

        // check result == 0 ? 
        if (!querySnapShot.empty) {
            
            // it reurn doc of conversation id that user are member
            const listConversation = querySnapShot.docs.map((doc) => ({
                id: doc.id, ...doc.data(), partnerId: findpartnerId(doc.data().member, req.params.userId)
            }));

            // for call data can use method toDate() to convert it to date object 
            res.status(200).json({ status: "success", conversation: listConversation });
            return;
        }
        else {
            res.status(422).json({ status: "success", message: "No conversation" });
            return;
        }
    } catch (err) {
        res.status(500).json({ status: "fail", message: err.message });
        return;
    }

});


export default router