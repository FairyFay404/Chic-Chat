import express from "express";
import { ref, set, get } from "firebase/database";
import { collection, addDoc, Timestamp, query, where, getDocs, orderBy} from "firebase/firestore";
import { database } from "../firebase-config.js";
import { getMessageById } from "../firebase_query.js";

const router = express.Router();

/* schema for messages */
/* 
{
    id: string [generated by firebase],
    conversationId: string [from fetching data],
    text: string, 
    senderId: string,
    createAt: date,
    updateAt: date
}

*/


/* for get message of that conversation */
/* in front-end you should check first who is the sender for place message [right/left]*/
/* path for add message by conversationId (chat lobby) */

router.post('/add', async (req,res) => {

  try{
    const messageRef = collection(database, "messages");
    const messageData = {
      conversationId: req.body.conversationId,
      text: req.body.text, 
      senderId: req.body.senderId,
      createAt: new Date(),
      updateAt: new Date()   
    }

    const addMessage = await addDoc(messageRef, messageData);

    /* return doc in firebase becuase we want createAt and updateAt in timeStamp */
    let messageDoc = {};
    messageDoc = await getMessageById(addMessage.id);


  
    res.status(200).json({status: "success", message: "Successfully add message", messageDoc : messageDoc});
    return;
    
  }catch(err){
    res.status(500).json({status: "fail", message: err});
    return;

  }
    
})

/* path for get message of that conversation room */
/* 1. query message and check messages are exist */
router.get('/:conversationId', async (req, res)=> {

  try {
    const messageRef = collection(database, "messages");
    const queryData = query(messageRef, where("conversationId", "==", req.params.conversationId), orderBy("createAt", "asc"));
    
    const querySnapShot = await getDocs(queryData);

    /* check result is not empty */
    if(!querySnapShot.empty){

      /* mapping data form doc snapshot */
      const listMessages = querySnapShot.docs.map((doc)=>({
        id: doc.id,...doc.data()
      }))
      
      res.status(200).json({status: "success", listMessages: listMessages});
      return;


    }
    else {
      res.status(422).json({status: "fail", message: "No message in this conversation"});
      return;
    }
    
  } catch (err) {
    res.status(500).json({status: "fail", message: err});
    return;
  }

})


export default router